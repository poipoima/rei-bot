#!/usr/bin/env python3
import os
import sys
import asyncio
import time
import re
import logging
from watchdog.observers import Observer
from watchdog.events import LoggingEventHandler, FileSystemEventHandler
from orator import DatabaseManager, Model
from dotenv import load_dotenv
load_dotenv()

observer = Observer()

config = {
    'mysql': {
        'driver': os.environ.get('db_driver'),
        'host': os.environ.get('db_host'),
        'database': os.environ.get('db_database'),
        'user': os.environ.get('db_user'),
        'password': os.environ.get('db_password'),
        'prefix': ''
    }
}

db = DatabaseManager(config)
Model.set_connection_resolver(db)


def get_file_names(directory_path):
    file_names = []
    for entry in os.listdir(directory_path):
        full_path = os.path.join(directory_path, entry)
        if os.path.isfile(full_path):
            file_names.append(entry)
    
    def extract_number(filename):
        match = re.match(r"^(\d+)", filename)
        return int(match.group(1)) if match else float('inf')

    return sorted(file_names, key=extract_number)

def migrateAll():
    files_in_directory = get_file_names("migrations")

    migratedReader = open(f"migrated", "r")
    migrations = migratedReader.read()
    migratedReader.close()

    migratedAppender = open(f"migrated", "a")

    for file_name in files_in_directory:
        if( "__pycache__" in file_name ):
            continue
        if( ".sql" not in file_name ):
            continue
        if( f"/{file_name}-" in migrations ):
            continue

        codeReader = open(f"migrations/{file_name}", "r")
        code = codeReader.read()
        codeReader.close()

        if( len(code) < 3 ):
            continue
        try:
            db.statement(code)

            migratedAppender.write(f"/{file_name}-\n")

            print(f"+Migration {file_name}")
        except Exception as e:
            print(f"Failed migration {file_name} {e}")


    migratedAppender.close()

def collectFields():
    return


def makeMigration(collect = True, fields = {}, modelName = ""):
    if( collect ):
        fields = collectFields()

    if( not modelName ):
        modelName = input("Migration name: ").capitalize()

    files_in_directory = get_file_names("migrations")
    last_num = int( files_in_directory[-1].split("/")[0] )


    migrationMame = f"migrations/{last_num+1}_{modelName}.sql"
    content_to_write = "This is the first line.\nThis is the second line."

    try:
        with open(migrationMame, "w") as file:
            file.write(content_to_write)
        print(f"+Migration '{modelName}' created successfully.")
    except IOError as e:
        print(f"Error writing to file: {e}")

def makeModel():
    createMigrationOrNot = input("Do you want to make a migration? (yes/no): ")
    migrationCreation = False
    if createMigrationOrNot.lower() == "yes" or createMigrationOrNot.lower() == "y":
        migrationCreation = True
    else:
        print("Continuing...")

    modelName = input("Model name ( Singular form ): ").capitalize()


    fields = collectFields()
    makeMigration(False, fields, f"creation_of_table_{modelName.lower()}s")

    modelFile = f"models/{modelName}.py"
    content_to_write = "This is the first line.\nThis is the second line."

    try:
        with open(modelFile, "w") as file:
            file.write(content_to_write)
        print(f"+Model '{modelName}' created successfully.")
    except IOError as e:
        print(f"Error writing to file: {e}")


functions = {
    "migrate": migrateAll,
    "migration:make": makeMigration,
    "model:make": makeModel
}

def main():
    if len(sys.argv) < 2:
        print("Usage: pythonscript <argument>")
        return
    
    argument = sys.argv[1]
    if( argument in functions ):
        functions[argument]()


if __name__ == "__main__":
    main()